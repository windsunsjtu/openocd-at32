name: OpenOCD Cross Build

on: push

jobs:
  build-mac:
    runs-on: macos-latest
    env:
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v2
      - name: install deps
        run: brew install libtool automake libusb hidapi libftdi texinfo coreutils
      - name: build
        env:
          MAKE_JOBS: 2
        run: |
          export PATH=/usr/local/opt/texinfo/bin:$PATH
          mkdir -p $BUILD_DIR
          ./bootstrap


          ./configure --prefix=$(grealpath $BUILD_DIR) 
          make
          make install-strip

          echo "ARTIFACT_PATH=$(grealpath $BUILD_DIR)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: openocd-mac
          path: ${{ env.ARTIFACT_PATH }}/*

  build-linux:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v2
      - name: install deps
        run: sudo apt-get install git gcc make libtool pkg-config autoconf automake texinfo libusb-1.0-0-dev libftdi-dev libhidapi-dev libcapstone-dev libudev-dev
      - name: build
        env:
          MAKE_JOBS: 2
        run: |
          mkdir -p $BUILD_DIR
          ./bootstrap

          export LIBUSB1_LIBS="-l:libftdi.a -l:libusb.a -l:libusb-1.0.a -l:libhidapi-hidraw.a -ludev"

          ./configure --prefix=$(realpath $BUILD_DIR) 
          make
          make install-strip

          echo "ARTIFACT_PATH=$(realpath $BUILD_DIR)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: openocd-linux
          path: ${{ env.ARTIFACT_PATH }}/*

  build-windows:
    runs-on: ubuntu-latest
    env:
      DL_DIR: /downloads
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v2
      - name: install deps
        run: sudo apt-get install autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive g++-mingw-w64-i686
      - name: Bootstrap
        run: ./bootstrap
      - name: Prepare libusb1
        env:
          LIBUSB1_VER: 1.0.26
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
          tar -xjf libusb-${LIBUSB1_VER}.tar.bz2
          echo "LIBUSB1_SRC=$PWD/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
      - name: Prepare hidapi
        env:
          HIDAPI_VER: 0.11.2
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz"
          tar -xzf hidapi-${HIDAPI_VER}.tar.gz
          cd hidapi-hidapi-${HIDAPI_VER}
          ./bootstrap
          echo "HIDAPI_SRC=$PWD" >> $GITHUB_ENV
      - name: Prepare libftdi
        env:
          LIBFTDI_VER: 1.5
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          wget "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2"
          tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2
          echo "LIBFTDI_SRC=$PWD/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
      - name: Prepare capstone
        env:
          CAPSTONE_VER: 4.0.2
        run: |
          mkdir -p $DL_DIR && cd $DL_DIR
          CAPSTONE_NAME=${CAPSTONE_VER}
          CAPSTONE_FOLDER=capstone-${CAPSTONE_VER}
          wget "https://github.com/aquynh/capstone/archive/${CAPSTONE_VER}.tar.gz"
          tar -xzf ${CAPSTONE_VER}.tar.gz
          echo "CAPSTONE_SRC=$PWD/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV
      - name: Package OpenOCD for windows
        env:
          MAKE_JOBS: 2
          HOST: i686-w64-mingw32
          LIBUSB1_CONFIG: --enable-shared --disable-static
          HIDAPI_CONFIG: --enable-shared --disable-static --disable-testgui
          LIBFTDI_CONFIG: -DSTATICLIBS=OFF -DEXAMPLES=OFF -DFTDI_EEPROM=OFF
          CAPSTONE_CONFIG: "CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no"
        run: |
          # set env and call cross-build.sh
          export OPENOCD_TAG="`git rev-parse --short HEAD`"
          export OPENOCD_SRC=$PWD
          export OPENOCD_CONFIG=""
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          bash $OPENOCD_SRC/contrib/cross-build.sh $HOST

          # add missing dlls
          cd $HOST-root/usr
          cp `$HOST-gcc --print-file-name=libwinpthread-1.dll` ./bin/
          cp `$HOST-gcc --print-file-name=libgcc_s_dw2-1.dll` ./bin/

          echo "ARTIFACT_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: openocd-windows
          path: ${{ env.ARTIFACT_PATH }}/*

  pack:
    runs-on: ubuntu-latest
    needs:
      - build-mac
      - build-linux
      - build-windows
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: build

      - name: Generate xpack
        run: |
          mkdir output && cd output

          mkdir bin-darwin_x86_64
          cp -rv ../build/openocd-mac/bin/* bin-darwin_x86_64

          mkdir bin-windows_amd64
          cp -rv ../build/openocd-windows/bin/* bin-windows_amd64

          mkdir bin-linux_x86_64
          cp -rv ../build/openocd-linux/bin/* bin-linux_x86_64
          cp -rv ../build/openocd-linux/share/openocd/contrib contrib
          cp -rv ../build/openocd-linux/share/openocd/scripts scripts

      - name: Upload xpack
        uses: actions/upload-artifact@v3
        with:
          name: xpack
          path: output/*
